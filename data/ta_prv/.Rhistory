indice_col_ext <- indice_col_ext + 1
bw_y_M1 <- sd(M1$y)/kernel
bw_z_M1 <- sd(M1$z)/kernel
p <- p +
geom_density_2d(data = M1, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M1, bw_z_M1), colour = ext_colors[as.numeric(indice_col_ext)], show.legend = FALSE)
}
if (nrow(M2) >= 1) {
indice_col_flex <- indice_col_flex + 1
bw_y_M2 <- sd(M2$y)/kernel
bw_z_M2 <- sd(M2$z)/kernel
p <- p +
geom_density_2d(data = M2, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M2, bw_z_M2), colour = flex_colors[as.numeric(indice_col_flex)], show.legend = FALSE)
}
}
}
p <- p +
scale_y_continuous(limits=c(-3000, 4000), breaks=c(-2500, 0, 3000), expand = c(0, 0)) +
scale_x_continuous(limits=c(-450, 450), breaks=seq(from = -450, to = 450, by = 450), expand = c(0, 0)) +
ylab("") +
xlab("V-D (Î¼m)") +
geom_hline(yintercept=0, linetype="dashed", color = "black", size=0.5) +
geom_segment(aes(x=0, xend= 0, y=-2500, yend = 4000), linetype="dashed", color = "black", size=0.5) +
theme(axis.title.x = element_text(vjust=16), axis.line.x = element_line(colour = "black", size = 0.5, linetype = "solid"),
axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line.y=element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA_character_),
plot.background = element_rect(fill = "transparent", colour = NA_character_),
legend.background = element_rect(fill = "transparent"),
legend.box.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent")) +
annotation_custom(textGrob("L4", gp = gpar(col = "black", fontsize = 20)),
xmin = 300, xmax = 450, ymin = 50 , ymax = 400) +
annotation_custom(textGrob("L5", gp = gpar(col = "black", fontsize = 20)),
xmin = 300, xmax = 450, ymin = -50, ymax = -400)
p
}
density_kernel_yz_concatenate <- function (spinal_rc_y, spinal_rc_y_contra, data_all, Animal, m1, m2, color1, color2, IN, kernel, bin) {
M1 <-  data_all %>% filter(animal == Animal[1] & muscle == m1 & identity == IN)
M2 <-  data_all %>% filter(animal == Animal[1] & muscle == m2 & identity == IN)
if (2 <= length(Animal)) {
for (i in 2:length(Animal)) {
df1 <-  data_all %>% filter(animal == Animal[i] & muscle == m1 & identity == IN)
df2 <-  data_all %>% filter(animal == Animal[i] & muscle == m2 & identity == IN)
M1 <- rbind(M1, df1)
M2 <- rbind(M2, df2)
}
}
bw_y_M1 <- sd(M1$y)/kernel
bw_z_M1 <- sd(M1$z)/kernel
bw_y_M2 <- sd(M2$y)/kernel
bw_z_M2 <- sd(M2$z)/kernel
p <- ggplot() +
geom_path(data = spinal_rc_y, aes(x = V1, y = V2), size = 1.5) +
geom_path(data = spinal_rc_y_contra, aes(x = V1, y = V2), size = 1.5) +
geom_density_2d(data = M1, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M1, bw_z_M1), colour = as.character(color1), show.legend = FALSE) +
geom_density_2d(data = M2, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M2, bw_z_M2), colour = as.character(color2), show.legend = FALSE) +
scale_y_continuous(limits=c(-3000, 4000), breaks=c(-2500, 0, 3000), expand = c(0, 0)) +
scale_x_continuous(limits=c(-450, 450), breaks=seq(from = -450, to = 450, by = 450), expand = c(0, 0)) +
ylab("") +
xlab("V-D (Î¼m)") +
geom_hline(yintercept=0, linetype="dashed", color = "black", size=0.5) +
geom_segment(aes(x=0, xend= 0, y=-2500, yend = 4000), linetype="dashed", color = "black", size=0.5) +
theme(axis.title.x = element_text(vjust=16), axis.line.x = element_line(colour = "black", size = 0.5, linetype = "solid"),
axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line.y=element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA_character_),
plot.background = element_rect(fill = "transparent", colour = NA_character_),
legend.background = element_rect(fill = "transparent"),
legend.box.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent")) +
annotation_custom(textGrob("L4", gp = gpar(col = "black", fontsize = 20)),
xmin = 300, xmax = 450, ymin = 50 , ymax = 400) +
annotation_custom(textGrob("L5", gp = gpar(col = "black", fontsize = 20)),
xmin = 300, xmax = 450, ymin = -50, ymax = -400)
p
}
density_kernel_yz_concatenate_by_method <- function (spinal_rc_y, spinal_rc_y_contra, data_all, m1, m2, color_pal1, color_pal2, nb_samples_ext, nb_samples_flex, IN, MN, kernel, bin, method_used) {
if (nb_samples_ext >= 1) {
ext_colors <- color_pal1(nb_samples_ext)
} else {
ext_colors <- "transparent"
}
if (nb_samples_flex >= 1) {
flex_colors <- color_pal2(nb_samples_flex)
} else {
flex_colors <- "transparent"
}
indice_col_ext <- 1
indice_col_flex <- 1
M1 <-  data_all %>% filter(method == method_used[1] & muscle == m1 & identity == IN)
M2 <-  data_all %>% filter(method == method_used[1] & muscle == m2 & identity == IN)
bw_y_M1 <- sd(M1$y)/kernel
bw_z_M1 <- sd(M1$z)/kernel
bw_y_M2 <- sd(M2$y)/kernel
bw_z_M2 <- sd(M2$z)/kernel
p <- ggplot() +
geom_path(data = spinal_rc_y, aes(x = V1, y = V2), size = 1.5) +
geom_path(data = spinal_rc_y_contra, aes(x = V1, y = V2), size = 1.5) +
geom_density_2d(data = M1, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M1, bw_z_M1), colour = ext_colors[as.numeric(indice_col_ext)], show.legend = FALSE) +
geom_density_2d(data = M2, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M2, bw_z_M2), colour = flex_colors[as.numeric(indice_col_flex)], show.legend = FALSE)
if (2 <= length(method_used)) {
for (i in 2:length(method_used)) {
M1 <-  data_all %>% filter(method == method_used[i] & muscle == m1 & identity == IN)
M2 <-  data_all %>% filter(method == method_used[i] & muscle == m2 & identity == IN)
if (nrow(M1) >= 1) {
indice_col_ext <- indice_col_ext + 1
bw_y_M1 <- sd(M1$y)/kernel
bw_z_M1 <- sd(M1$z)/kernel
p <- p +
geom_density_2d(data = M1, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M1, bw_z_M1), colour = ext_colors[as.numeric(indice_col_ext)], show.legend = FALSE)
}
if (nrow(M2) >= 1) {
indice_col_flex <- indice_col_flex + 1
bw_y_M2 <- sd(M2$y)/kernel
bw_z_M2 <- sd(M2$z)/kernel
p <- p +
geom_density_2d(data = M2, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M2, bw_z_M2), colour = flex_colors[as.numeric(indice_col_flex)], show.legend = FALSE)
}
}
}
p <- p +
scale_y_continuous(limits=c(-3000, 4000), breaks=c(-2500, 0, 3000), expand = c(0, 0)) +
scale_x_continuous(limits=c(-450, 450), breaks=seq(from = -450, to = 450, by = 450), expand = c(0, 0)) +
ylab("") +
xlab("V-D (Î¼m)") +
geom_hline(yintercept=0, linetype="dashed", color = "black", size=0.5) +
geom_segment(aes(x=0, xend= 0, y=-2500, yend = 4000), linetype="dashed", color = "black", size=0.5) +
theme(axis.title.x = element_text(vjust=16), axis.line.x = element_line(colour = "black", size = 0.5, linetype = "solid"),
axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line.y=element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA_character_),
plot.background = element_rect(fill = "transparent", colour = NA_character_),
legend.background = element_rect(fill = "transparent"),
legend.box.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent")) +
annotation_custom(textGrob("L4", gp = gpar(col = "black", fontsize = 20)),
xmin = 300, xmax = 450, ymin = 50 , ymax = 400) +
annotation_custom(textGrob("L5", gp = gpar(col = "black", fontsize = 20)),
xmin = 300, xmax = 450, ymin = -50, ymax = -400)
p
}
density_kernel_yz_concatenate_by_titer <- function (spinal_rc_y, spinal_rc_y_contra, data_all, m1, m2, color_pal1, color_pal2, nb_samples_ext, nb_samples_flex, IN, MN, kernel, bin, titer_used, method_used) {
if (nb_samples_ext >= 1) {
ext_colors <- color_pal1(nb_samples_ext)
} else {
ext_colors <- "transparent"
}
if (nb_samples_flex >= 1) {
flex_colors <- color_pal2(nb_samples_flex)
} else {
flex_colors <- "transparent"
}
indice_col_ext <- 1
indice_col_flex <- 1
M1 <-  data_all %>% filter(method == method_used & titer == titer_used[1] & muscle == m1 & identity == IN)
M2 <-  data_all %>% filter(method == method_used & titer == titer_used[1] & muscle == m2 & identity == IN)
bw_y_M1 <- sd(M1$y)/kernel
bw_z_M1 <- sd(M1$z)/kernel
bw_y_M2 <- sd(M2$y)/kernel
bw_z_M2 <- sd(M2$z)/kernel
p <- ggplot() +
geom_path(data = spinal_rc_y, aes(x = V1, y = V2), size = 1.5) +
geom_path(data = spinal_rc_y_contra, aes(x = V1, y = V2), size = 1.5) +
geom_density_2d(data = M1, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M1, bw_z_M1), colour = ext_colors[as.numeric(indice_col_ext)], show.legend = FALSE) +
geom_density_2d(data = M2, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M2, bw_z_M2), colour = flex_colors[as.numeric(indice_col_flex)], show.legend = FALSE)
if (2 <= length(titer_used)) {
for (i in 2:length(titer_used)) {
M1 <-  data_all %>% filter(method == method_used & titer == titer_used[i] & muscle == m1 & identity == IN)
M2 <-  data_all %>% filter(method == method_used & titer == titer_used[i] & muscle == m2 & identity == IN)
if (nrow(M1) >= 1) {
indice_col_ext <- indice_col_ext + 1
bw_y_M1 <- sd(M1$y)/kernel
bw_z_M1 <- sd(M1$z)/kernel
p <- p +
geom_density_2d(data = M1, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M1, bw_z_M1), colour = ext_colors[as.numeric(indice_col_ext)], show.legend = FALSE)
}
if (nrow(M2) >= 1) {
indice_col_flex <- indice_col_flex + 1
bw_y_M2 <- sd(M2$y)/kernel
bw_z_M2 <- sd(M2$z)/kernel
p <- p +
geom_density_2d(data = M2, aes(x = y, y = -z), bins = bin,  h=c(bw_y_M2, bw_z_M2), colour = flex_colors[as.numeric(indice_col_flex)], show.legend = FALSE)
}
}
}
p <- p +
scale_y_continuous(limits=c(-3000, 4000), breaks=c(-2500, 0, 3000), expand = c(0, 0)) +
scale_x_continuous(limits=c(-450, 450), breaks=seq(from = -450, to = 450, by = 450), expand = c(0, 0)) +
ylab("") +
xlab("V-D (Î¼m)") +
geom_hline(yintercept=0, linetype="dashed", color = "black", size=0.5) +
geom_segment(aes(x=0, xend= 0, y=-2500, yend = 4000), linetype="dashed", color = "black", size=0.5) +
theme(axis.title.x = element_text(vjust=16), axis.line.x = element_line(colour = "black", size = 0.5, linetype = "solid"),
axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line.y=element_blank(),
panel.background = element_rect(fill = "transparent", colour = NA_character_),
plot.background = element_rect(fill = "transparent", colour = NA_character_),
legend.background = element_rect(fill = "transparent"),
legend.box.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent")) +
annotation_custom(textGrob("L4", gp = gpar(col = "black", fontsize = 20)),
xmin = 300, xmax = 450, ymin = 50 , ymax = 400) +
annotation_custom(textGrob("L5", gp = gpar(col = "black", fontsize = 20)),
xmin = 300, xmax = 450, ymin = -50, ymax = -400)
p
}
## Function boxplot applied to individual samples ##
boxplot_per_sample <- function(data, method_used, titer_used, m1, m2, color1, color2, ymin, ymax){
remove <- c("_n_djm","_n_rmb", "_n_nz", "_n_slp")
data$animal <- str_remove_all(data$animal, paste(remove, collapse = "|"))
if (titer_used != 0){
x_dorsal_ipsi_m1 <- data %>% filter(y >= 0, x >= 0, method == method_used, identity == "IN", muscle == m1, titer == titer_used)
x_dorsal_ipsi_m2 <- data %>% filter(y >= 0, x >= 0, method == method_used, identity == "IN", muscle == m2,  titer == titer_used)
}
if (titer_used == 0){
x_dorsal_ipsi_m1 <- data %>% filter(y >= 0, x >= 0, method == method_used, identity == "IN", muscle == m1)
x_dorsal_ipsi_m2 <- data %>% filter(y >= 0, x >= 0, method == method_used, identity == "IN", muscle == m2)
}
x_dorsal_ipsi_m1$animal <- paste(as.character(m1), "_",  x_dorsal_ipsi_m1$animal, sep="")
x_dorsal_ipsi_m2$animal <- paste(as.character(m2), "_",  x_dorsal_ipsi_m2$animal, sep="")
nb_sample_m1 <- nrow(distinct(data.frame(x_dorsal_ipsi_m1$animal)))
nb_sample_m2 <- nrow(distinct(data.frame(x_dorsal_ipsi_m2$animal)))
c1 <- distinct(data.frame(x_dorsal_ipsi_m1$animal))
c2 <- distinct(data.frame(x_dorsal_ipsi_m2$animal))
l <- c(c1, c2)
l <- unlist(l, use.names = FALSE)
x_dorsal_ipsi <- rbind(x_dorsal_ipsi_m1, x_dorsal_ipsi_m2)
x_dorsal_ipsi$animal <- factor(x_dorsal_ipsi$animal, levels = l, ordered = TRUE)
x_dorsal_ipsi$muscle <- factor(x_dorsal_ipsi$muscle, levels = c(m1, m2), ordered = TRUE)
graph <- ggplot(data = x_dorsal_ipsi,aes(x = animal, y = x, colour = muscle)) +
stat_boxplot(geom = "errorbar", width = 0.2, show.legend = FALSE, size = 1, linetype = 5) +
geom_boxplot(show.legend = FALSE, width= 0.4, size = 1,  outlier.shape = 3, outlier.stroke = 1.3, linetype = 0) +
geom_boxplot(show.legend = FALSE, width= 0.4, size = 1, outlier.shape = NA, coef = 0) +
scale_color_manual(values = c(as.character(color1), as.character(color2))) +
scale_y_continuous(limits=c(ymin, ymax), breaks=seq(from = ymin, to = 850, by = 850), expand = c(0, 0)) +
ylab("M-L (Î¼m)") +
xlab("") +
theme(axis.text=element_text(size=12, colour = "black")) +
theme_classic() +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust=1, colour = c(rep(as.character(color1),nb_sample_m1),rep(as.character(color2), nb_sample_m2)))) +
theme(axis.line = element_line(colour = "black", size = 0.5, linetype = "solid"))
graph
}
boxplot_per_sample_interactive <- function(data, method_used, titer_used, m1, m2, color1, color2, ymin, ymax){
remove <- c("_n_djm","_n_rmb", "_n_nz", "_n_slp")
data$animal <- str_remove_all(data$animal, paste(remove, collapse = "|"))
if (titer_used != 0){
x_dorsal_ipsi_m1 <- data %>% filter(y >= 0, x >= 0, method == method_used, identity == "IN", muscle == m1, titer == titer_used)
x_dorsal_ipsi_m2 <- data %>% filter(y >= 0, x >= 0, method == method_used, identity == "IN", muscle == m2,  titer == titer_used)
}
if (titer_used == 0){
x_dorsal_ipsi_m1 <- data %>% filter(y >= 0, x >= 0, method == method_used, identity == "IN", muscle == m1)
x_dorsal_ipsi_m2 <- data %>% filter(y >= 0, x >= 0, method == method_used, identity == "IN", muscle == m2)
}
x_dorsal_ipsi_m1$muscle <- factor(x_dorsal_ipsi_m1$muscle, levels = c(as.character(m1), as.character(m2)))
x_dorsal_ipsi_m2$muscle <- factor(x_dorsal_ipsi_m2$muscle, levels = c(as.character(m1), as.character(m2)))
x_dorsal_ipsi_m1$animal <- paste(as.character(m1), "_",  x_dorsal_ipsi_m1$animal, sep="")
x_dorsal_ipsi_m2$animal <- paste(as.character(m2), "_",  x_dorsal_ipsi_m2$animal, sep="")
nb_sample_m1 <- nrow(distinct(data.frame(x_dorsal_ipsi_m1$animal)))
nb_sample_m2 <- nrow(distinct(data.frame(x_dorsal_ipsi_m2$animal)))
c1 <- distinct(data.frame(x_dorsal_ipsi_m1$animal))
c2 <- distinct(data.frame(x_dorsal_ipsi_m2$animal))
l <- c(c1, c2)
l <- unlist(l, use.names = FALSE)
x_dorsal_ipsi <- rbind(x_dorsal_ipsi_m1, x_dorsal_ipsi_m2)
x_dorsal_ipsi$animal <- factor(x_dorsal_ipsi$animal, levels = l)
graph <- ggplot(data = x_dorsal_ipsi,aes(x = animal, y = x, colour = muscle)) +
geom_boxplot( show.legend = FALSE, width= 0.4, size = 1, outlier.shape = 3) +
scale_color_manual(values = c(as.character(color1), as.character(color2))) +
scale_y_continuous(limits=c(ymin, ymax), breaks=seq(from = ymin, to = 850, by = 850), expand = c(0, 0)) +
ylab("M-L (Î¼m)") +
xlab("") +
theme(axis.text=element_text(size=12, colour = "black")) +
theme_classic() +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust=1)) +
theme(axis.line = element_line(colour = "black", size = 0.5, linetype = "solid"))
font = list(family = "Arial" , size = 14, color = "white")
label = list(bordercolor = "transparent", font = font)
graph_interactive = ggplotly(graph, height = 450, width=700) %>%
style(hoverlabel = label) %>%
layout(font = font)
graph_interactive$x$data <- lapply(graph_interactive$x$data, FUN = function(x){
x$marker$outliercolor = x$line$color
x$marker$color = x$line$color
x$marker$line = x$line$color
return(x)
})
graph_interactive
}
## Function building a data frame with the median of each sample ##
df_individual <- function(data_all, method_used, titer_used, m1, m2, M1, M2){
if (titer_used != 0){
data_m1 <- data_all %>% filter(y > 0, x > 0, method == method_used, identity == "IN", muscle == m1, titer == titer_used)
data_m2 <- data_all %>% filter(y > 0, x > 0, method == method_used, identity == "IN", muscle == m2, titer == titer_used)
}
if (titer_used == 0){
data_m1 <- data_all %>% filter(y > 0, x > 0, method == method_used, identity == "IN", muscle == m1)
data_m2 <- data_all %>% filter(y > 0, x > 0, method == method_used, identity == "IN", muscle == m2)
}
medio_lateral <- c()
sample <- c()
l_m1 <- distinct(data.frame(data_m1$animal))
l_m1 <- unlist(l_m1, use.names = FALSE)
l_m2 <- distinct(data.frame(data_m2$animal))
l_m2 <- unlist(l_m2, use.names = FALSE)
group <- rep(c(as.character(M1),as.character(M2)),times=c(length(l_m1), length(l_m2)))
for (i in 1:length(l_m1)){
df <- data_m1 %>% filter(animal == as.character(l_m1[i]))
med <- median(df$x)
sample  <- c(sample, as.character(l_m1[i]))
medio_lateral <- c(medio_lateral, med)
}
for (i in 1:length(l_m2)){
df <- data_m2 %>% filter(animal == as.character(l_m2[i]))
med <- median(df$x)
sample  <- c(sample, as.character(l_m2[i]))
medio_lateral <- c(medio_lateral, med)
}
t = (as.numeric(length(l_m1)) + as.numeric(length(l_m2)))
method <- c(rep(as.character(method_used),times = as.numeric(t)))
dat<- data.frame(group, medio_lateral, sample, method)
dat
}
## Function boxplot and individual experiment side by side ##
Boxplot_individual_interactive <- function(data, color1, color2, ymin, ymax) {
graph <- ggplot(data = data, aes(y = medio_lateral, text = paste0("Medio-Lateral: ", round(medio_lateral, digits = 2)))) +
geom_boxplot(aes(x = group, colour = group), show.legend = FALSE, width= 0.2, size = 1) +
scale_color_manual(values = c(as.character(color1), as.character(color2))) +
scale_y_continuous(limits=c(ymin, ymax), breaks=seq(from = ymin, to = 850, by = 850), expand = c(0, 0)) +
geom_jitter(aes(x = as.numeric(group) + 0.4, y = medio_lateral, colour = group), size = 3, show.legend = FALSE, fill = NA, alpha = 0.4,  width = 0.12) +
ylab("M-L (Î¼m)") +
xlab("") +
theme(axis.text=element_text(size=12, colour = "black")) +
theme_classic() +
theme(axis.text.x = element_text(size = 16)) +
theme(axis.line = element_line(colour = "black", size = 0.5, linetype = "solid"))
font = list(family = "Arial" , size = 14, color = "white")
label = list(bordercolor = "transparent", font = font)
graph_interactive = ggplotly(graph, height = 450, width=450, tooltip = c("text")) %>%
style(hoverlabel = label) %>%
layout(font = font)
return (graph_interactive)
}
Boxplot_individual <- function(data, color1, color2, ymin, ymax) { # Here I forced all the data to be included in whiskers
graph <- ggplot(data = data, aes(y = medio_lateral)) +
stat_boxplot(aes(x = group, colour = group), coef = 4, geom = "errorbar", width = 0.1, show.legend = FALSE, size = 1) +
geom_boxplot(aes(x = group, colour = group), coef= 4, show.legend = FALSE, width= 0.2, size = 1) +
scale_color_manual(values = c(as.character(color1), as.character(color2))) +
scale_y_continuous(limits=c(ymin, ymax), breaks=seq(from = ymin, to = 850, by = 850), expand = c(0, 0)) +
geom_jitter(aes(x = as.numeric(group) + 0.25, y = medio_lateral, colour = group), size = 3.5, show.legend = FALSE, fill = NA, alpha = 0.4,  width = 0.1) +
ylab("M-L (Î¼m)") +
xlab("") +
theme(axis.text=element_text(size=12, colour = "black")) +
theme_classic() +
theme(axis.text.x = element_text(size = 16, colour = c(as.character(color1), as.character(color2)))) +
theme(axis.line = element_line(colour = "black", size = 0.5, linetype = "solid"))
graph
}
## Function boxplot and individual experiment, methods side by side ##
Boxplot_methods_interactive <- function(data, colors_vector, ymin, ymax) {
graph <- ggplot(data = data, aes(x = group, y = medio_lateral, text = paste0("Medio-Lateral: ", round(medio_lateral, digits = 2)))) +
geom_boxplot(aes(colour = group), show.legend = FALSE, width= 0.2, size = 1) +
scale_color_manual(values = colors_vector) +
scale_y_continuous(limits=c(ymin, ymax), breaks=seq(from = ymin, to = 850, by = 850), expand = c(0, 0)) +
geom_jitter(aes(x = as.numeric(group) + 0.45, y = medio_lateral, colour = group), size = 3, show.legend = FALSE, fill = NA, alpha = 0.4,  width = 0.12) +
ylab("M-L (Î¼m)") +
xlab("") +
theme(axis.text=element_text(size=12, colour = "black")) +
theme_classic() +
theme(axis.text.x = element_text(size = 12, angle = 45, hjust=1)) +
theme(axis.line = element_line(colour = "black", size = 0.5, linetype = "solid"))
font = list(family = "Arial" , size = 14, color = "white")
label = list(bordercolor = "transparent", font = font)
graph_interactive = ggplotly(graph, height = 450, width=600, tooltip = c("text")) %>%
style(hoverlabel = label) %>%
layout(font = font)
return (graph_interactive)
}
Boxplot_methods <- function(data, colors_vector, ymin, ymax) {
graph <- ggplot(data = data, aes(x = group, y = medio_lateral)) +
stat_boxplot(aes(colour = group), geom = "errorbar", coef = 4, width = 0.2, show.legend = FALSE, size = 1) +
geom_boxplot(aes(colour = group), show.legend = FALSE, coef = 4, width= 0.4, size = 1) +
scale_color_manual(values = colors_vector) +
scale_y_continuous(limits=c(ymin, ymax), breaks=seq(from = ymin, to = 850, by = 850), expand = c(0, 0)) +
geom_jitter(aes(x = as.numeric(group) + 0.42, y = medio_lateral, colour = group), size = 3.5, show.legend = FALSE, fill = NA, alpha = 0.4,  width = 0.14) +
ylab("M-L (Î¼m)") +
xlab("") +
theme(axis.text=element_text(size=12, colour = "black")) +
theme_classic() +
theme(axis.text.x = element_text(size = 12, angle = 45, hjust=1, colour = colors_vector)) +
theme(axis.line = element_line(colour = "black", size = 0.5, linetype = "solid"))
graph
}
## file for spinal cord shape ##
setwd("F:\documents\master\r")
spinal <- read.delim("halfcordt.txt", header = FALSE)
spinal$V1 <- spinal$V1 * 1700
spinal$V2 <- spinal$V2 * 900
spinal_contra <- spinal[order(nrow(spinal):1),]
spinal_contra$V1[sapply(spinal_contra$V1 , is.numeric)] <- spinal_contra$V1 [sapply(spinal_contra$V1, is.numeric)] * -1
spinal <- rbind(spinal, spinal_contra)
spinal_rc <- read.delim("halfcordld.txt", header = FALSE)
spinal_rc$V1 <- spinal_rc$V1 * 1700
spinal_rc <- spinal_rc %>% mutate(V2 = ifelse(V2 > 0, V2 * 1507.5404, V2 * 2421.9371))
spinal_rc_contra <- spinal_rc %>% mutate(V1 = V1*-1)
spinal_rc_y <- read.delim("halfcordf.txt", header = FALSE)
spinal_rc_y$V1 <- spinal_rc_y$V1 * 900
spinal_rc_y <- spinal_rc_y %>% mutate(V2 = ifelse(V2 > 0, V2 * 4491.354, V2 * 4534.224))
spinal_rc_y_contra <- spinal_rc_y %>% mutate(V1 = V1*-1)
## muscle injected ##
lg <- "lg"
ta <- "ta"
mg <- "mg"
pl <- "pl"
LG <- "LG"
TA <- "TA"
MG <- "MG"
PL <- "PL"
N_A <- ""
gs <- "gs"
GS <- "GS"
## color used ##
color_range_ext <- colorRampPalette(c("#006eb8", "#003e68"))
color_range_ext2 <- colorRampPalette(c("#003e68", "#006eb8"))
color_range_flex <- colorRampPalette(c("#eda911", "#be6100"))
color_range_flex2 <- colorRampPalette(c("#be6100", "#eda911"))
color_lg <- "#006eb8"
color_gs <- "#006eb8"
color_ta <- "#eda911"
color_mg <- "#003e68"
color_pl <- "#be6100"
transpa <- "transparent"
color_glyt2_off <- "#db6ca9"
color_glyt2_on <- "#00a875"
## Data organisation ##
IN <- "IN"
MN <- "MN"
Size <- c(0.5, 2)
ymin_d <- 0 #limit x min when ploting only dorsal part
ymin_vd <- -850 #limit x min when ploting from ventral to dorsal part
ymax_950 <- 950 #limit x max when ploting to more than 850
ymax_850 <- 850 #limit x max when ploting exactly to 850
## -- Figure 3 -- ##
method_used <- "G_Rab_ChAT_RGT"
titer_used <- "high"
Size <- c(0.1, 0)
kernel <- 5
bin <- 6
df <- data_all %>% filter(method == as.character(method_used), titer == as.character(titer_used))
animals <- distinct(data.frame(df$animal))
Animal <- as.character(animals$df.animal)
df <- data_all %>% filter(method == method_used, titer == titer_used)
## -- Figure 3 -- ##
method_used <- "G_Rab_ChAT_RGT"
titer_used <- "high"
Size <- c(0.1, 0)
kernel <- 5
bin <- 6
df <- data_all %>% filter(method == method_used, titer == titer_used)
library(dplyr)
df <- data_all %>% filter(method == method_used, titer == titer_used)
method
method <- "G_Rab_ChAT_RGT"
df <- data_all %>% filter(method == method_used, titer == titer_used)
install.packages("dplyr")
library(openxlsx)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
library(knitr)
library(FSA)
library(car)
require(multcomp)
library(multcompView)
library(ggbeeswarm)
library(cowplot)
library(grid)
library(mratios)
library(plotrix)
library(ggpval)
library(forcats)
library(plotly)
library(tidyr)
library(dplyr)
library(plotlyGeoAssets)
library(tools)
library(stringr)
library(png)
library(magick)
library(devtools)
library(ggcorrplot)
library(Rcpp)
## -- Figure 3 -- ##
method_used <- "G_Rab_ChAT_RGT"
titer_used <- "high"
Size <- c(0.1, 0)
kernel <- 5
bin <- 6
df <- data_all %>% filter(method == method_used, titer == titer_used)
animals <- distinct(data.frame(df$animal))
Animal <- as.character(animals$df.animal)
## -- 3A -- ##
density <- 0
concatenate <- 0
Figure_3A <- complete_graph_xy_density(spinal, density, concatenate, data_all, Animal, lg, N_A, color_range_ext, transpa, color_lg, transpa, 11,
0, IN, N_A, Size, LG, N_A, kernel, bin, method_used, titer_used)
## --
## -- 3E -- ##
Figure_3E <- boxplot_per_sample(data_all, method_used, titer_used, lg, ta, color_lg, color_ta, ymin_d, ymax_950)
Figure_3E_interactive <- boxplot_per_sample_interactive(data_all, method_used, titer_used, lg, ta, color_lg, color_ta, ymin_d, ymax_950)
## -- 3E -- ##
Figure_3E <- boxplot_per_sample(data_all, method_used, titer_used, lg, ta, color_lg, color_ta, ymin_d, ymax_950)
Figure_3E_interactive <- boxplot_per_sample_interactive(data_all, method_used, titer_used, lg, ta, color_lg, color_ta, ymin_d, ymax_950)
Figure_3E
Figure_3E_interactive
